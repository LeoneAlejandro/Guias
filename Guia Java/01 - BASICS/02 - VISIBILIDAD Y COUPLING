VISIBILIDAD Y COUPLING

El coupling es un principio de la POO y se define como la dependencia entre clases. Básicamente mientras más dependencias tenga una clase sobre otra, más coupling tendrá y esto puede generar problemas a la hora de refactorizar. Lo ideal es tener la menor dependencia posible y, aunque es imposible que no haya dependencia entre clases, ésto nos facilitará trabajar a la hora de modificar nuestro código. Por ejemplo, supongamos que una clase depende de una instancia de otra; si a ésta segunda clase le cambiamos su constructor pidiendo que se pase ahora, un ID, tendremos que también cambiar la primer clase y pasar esa ID que ahora requiere. Esto no es muy complejo, pero hay casos donde una instancia de una clase es usada en otras 100 clases, por lo que tendríamos que cambiar estas 100 clases de la misma manera. 
Para reducir el coupling tenemos que pensar en cuantos atributos y métodos son públicos; mientras más sean, más posibilidades hay de que una clase las use, y lo ideal es no dejar métodos públicos que no sean usados. Aquí vemos de nuevo la importancia de la visibilidad de nuestros métodos y atributos, y como deberíamos, siempre que podamos, dejarlos como privados tanto como podamos.

A continuación vemos el alcance de cada modificador de visualidad y más adelante agregaremos "Protected" cuando veamos herencia:

	┌──────────────────────┬─────────────┬─────────────┬───────────────┬───────────────┬──────────────┬─────────────┐
	│ Modificador en Java  │ Modificador │ Misma Clase │  Sublcase en  │   Clase en    │  Sublcase en │  Clase en   │
	│                      │   en UML    │             │ mismo paquete │ mismo paquete │ otro paquete │ otro paquete│
	├──────────────────────┼─────────────┼─────────────┼───────────────┼───────────────┼──────────────┼─────────────┤
	│       public         │      +      │      √      │       √       │       √       │       √      │      √      │
	│                      │             │             │               │               │              │             │
	│       private        │      -      │      √      │       X       │       X       │       X      │      X      │
	│                      │             │             │               │               │              │             │
	│  (sin modificador)   │             │      √      │       √       │       √       │       X      │      X      │
	└──────────────────────┴─────────────┴─────────────┴───────────────┴───────────────┴──────────────┴─────────────┘