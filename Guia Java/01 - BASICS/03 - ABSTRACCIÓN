ABSTACCIÓN

Es el segundo principio de la POO y hace referencia a reducir complejidad ocultando detalles e implementaciones innecesarias. Cuando queremos cambiar un canal de la TV no necesitamos saber el funcionamiento interno de un control remoto, como el mismo se comunica con la TV y luego la acción de la TV para realizar esto, solo queremos apretar un botón y que se ejecute la acción. Lo mismo podemos hacer en nuestro código. Mediante la abstracción queremos que una clase sea como una caja negra sin importarnos que haya adentro, solo queremos que reciba una indicación y dé una respuesta, con una interfaz fácil de utilizar y reutilizar. Volviendo al ejemplo de la clase CuentaBancaria, queremos simplemente darle un nombre, el DNI del titular y una contraseña, y que nos devuelva el saldo, y nos deje extraer y depositar dinero; no nos interesa si internamente tendrá que calcular un tax, verificar si hay saldo antes de retirarlo, o cómo es el funcionamiento cuando se deposita dinero, cómo se cuenta el mismo, como verifica que la clave y el usuario sean correctos, etc. Otro ejemplo de abstracción es la comparación de usos de un mismo objeto en dos contextos diferentes. Podemos tener la clase "Avión" que sea usada por un SimuladorDeVuelo y por una AppReservaVuelos. Ambas aplicaciones utilizan la clase Avión pero de maneras muy diferentes, a un simulador de vuelo le interesarán objetos técnicos del avión para simular el uso del mismo, mientras que a una app de reserva de vuelos solo le interesará los asientos ocupados y libres dentro de un avión para ofrecerlos a viajeros.
En resumen, la abstracción es el modelado de un objeto o fenómeno del mundo real, limitado a un contexto específico, que represente todos los detalles relevantes a éste contexto con alta precisión y omita detalles innecesarios.
