INTERFACES

Como veníamos explicando en HERENCIA MULTIPLE, JAVA no soporta la misma debido al problema de ambiguedad -problema de rombo o diamante-, por lo cual para suplir esta faltante, JAVA implementa un mecanismo denominado INTERFAZ que nos permite emular esta herencia múltiple.

Veamos un ejemplo: Supongamos que tenemos el siguiente modelo con dos superclases y subclases totalmente diferentes y bien definidas:

 ┌──────────────────────┐         ┌───────────────────┐
 │    Ave               │         │   Dispositivo     │
 ├──────────────────────┤         ├───────────────────┤
 │+ ponerHuevos(): void │         │+ encender(): void │
 └──────────────────────┘         └───────────────────┘
            ^                               ^
            │                               │
            │                               │
 ┌──────────┴───────────┐         ┌─────────┴─────────┐
 │    PalomaMensajera   │         │   TelefonoMovil   │
 ├──────────────────────┤         ├───────────────────┤
 │+ volarRapido(): void │         │+ encender(): void │
 └──────────────────────┘         └───────────────────┘

Ahora supongamos que tenemos un requerimiento y una empresa nos pide hacer una campaña de publicidad utilizando ambos tipos de mensajería, Palomas Mensajeras y Teléfonos Moviles, por lo cual vamos a necesitar una clase intermediara para que puedan convivir las palomas y los teléfonos, supongamos "EnviadorDeMensaje". Lo ideal sería que esta clase tenga un método enviarMensaje() y que sea superclase de PalomaMensajera y TelefonoMovil y heredarles el método (sobreescrito o no)de manera de utilizar el polimorfismo, pero como ya vimos, ambas clases ya son subclases y heredan atributos y métodos de sus respectivas superclases -Ave y Dispositivo- y, la herencia múltiple, no está soportada en JAVA. Para esto aplicamos el mecanismo llamado INTERFAZ, señalando a esta nueva clase "EnviadorDeMensaje" como una. Una interfaz es muy similar a una clase abstracta ya que en ella solo puede haber métodos abstractos y/o constantes, estáticas y publicas. En UML hay que denotar a EnviadorDeMensaje como abstracto con la fuente itálica así también como su método enviarMensaje(), y además agregar el modificador <<interface>>. Ahora al definir una herencia de una interface EnviadorDeMensaje, con un método enviarMensaje() abstracto, obliga a las subclases de esa interface a sobreescribir ese método, por lo cual tendremos el siguiente modelo:

                              ┌───────────────────────┐
                              │ Compañia              │
                              ├───────────────────────┤
                              │ + hacerCampaña():void │
   ┌──────────────────────┐   └───────────┬───────────┘   ┌───────────────────┐
   │     Ave              │               │ -mensajeros   │   Dispositivo     │
   ├──────────────────────┤               │               ├───────────────────┤
   │+ ponerHuevos(): void │               ▼ *             │+ encender(): void │
   └──────────────────────┘   ┌─────────────────────────┐ └───────────────────┘
               ^              │ EnviadorDeMensaje       │           ^
               │              ├─────────────────────────┤           │
               │              │ + enviarMensaje(): void │           │
               │              └─────────────────────────┘           │
               │                ^                    ^              │
   ┌───────────┴───────────┐   /                      \   ┌─────────┴──────────────┐
   │     PalomaMensajera   │  /                        \  │   TelefonoMovil        │
   ├───────────────────────┤ /                          \ ├────────────────────────┤
   │+ volarRapido(): void  │/                            \│+ llamar(): void        │
   │+ enviarMensaje():void │                              │+ enviarMensaje(): void │
   └───────────────────────┘                              └────────────────────────┘

 Ahora la "herencia múltiple" en realidad se da entre una clase y una interface, donde la relación con la interfaz se denota con una linea punteada, pero sigue cumpliendo conceptualmente con la regla "es un/a", y la relación es idéntica a la herencia, por lo tanto, una paloma mensajera ES un ave, un teléfono ES un dispositvo y ambos SON enviadores de mensajes también.
┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│Las interfaces permiten implementar una o más interfaces, siendo más flexible que la herencia en JAVA (solo una)│
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

 En código podemos mediante el IDE crear directamente una INTERFAZ o simplemente crear una clase y cambiarla a interfaz:

 public interface EnviadorDeMensaje{
 		void enviarMensaje(String mensaje);				// o "public abstract void enviarMensaje(String mensaje);"
 }

 En JAVA se asume que adentro de una interfaz solamente puede haber métodos abstractos y, por ende, públicos para poder sobreescribirse, por lo que no hay que aclarar nada más que, el tipo de respuesta del método (void en este caso), el nombre del método que se va a sobreescribir, y el/los nombres y tipos de parámetros que recibirá ese método. Aunque no se necesario, se puede agregar "public abstract" en el método, solo para facilitar la lectura.

 Luego de crear la interfaz tenemos que explicitar que tanto las palómas como los teléfonos implementan esa interfaz:

 public class PalomaMensajera extends Ave implements EnviadorDeMensaje{
 		public void volarRápido(){
 			 System.out.println("Volando...")}
 		@Override
 		public void enviarMensaje(String mensaje){
 			volarRápido();
 			System.out.println(mensaje)}
 }

 y lo mismo con teléfono:

 public class TelefonoMovil extends Dispositivo implements EnviadorDeMensaje{
 		//En este caso el método encender lo hereda por ser un dispositivo y el mismo está en la superclase

 		@Override
 		public void enviarMensaje(String mensaje){
 			encender();
 			System.out.println(mensaje)}
 }

 Luego entonces solamente resta crear una Compañia que quiera hacer campaña

 public class Compañia {
 		private ArrayList<EnviadorDeMensaje> mensajeros;

 		public Compañia(){
 			mensajeros = new Arraylist<>();
 		}

 		public void agregarMensajero(EnviadorDeMensaje mensajero){
 			this.mensajero.add(mensajero)
 		}

 		public void hacerCampaña(){
 			for(EnviadorDeMensaje mensajero: mensajeros)
 			mensajero.enviarMensaje("Compre nuestro producto")
 		}
}

Por último desde un main se puede instanciar mensajeros, del tipo PalomaMensajera o TeléfonoMovil, ya que no se puede crear instancias de "EnviadoreDeMensajes", y se le pedirá enviarMensaje() mediante el método hacerCampaña() a cada uno independientemente de cómo lo haga y de qué tipo de enviador de mensaje sea (paloma o teléfono). Aqui vemos el increible poder de estas herramientas donde una campaña solo crea una colección de EnviadoresDeMensajes (que no son instanciables) pero mediante la herencia, polimorfismo, abstacción de clases, y upcasting (al recibir una paloma o un teléfono y guardarlo como EnviadorDeMensajes en la colección), no tiene que saber qué tendrá adentro en esa colleción (que manejará sólo como enviadores de mensajes), ni cómo harán para enviar un mensaje.
Podemos luego de tener establecido todo este código, crear un nuevo mensajero o clase -por ejemplo: Persona-, que implemente a la interfaz EnviadorDeMensaje, lo que nos obligará a que tenga un método enviarMensaje() en esta nueva clase -ya que la interfaz tiene el mismo método abstacto lo que obliga la sobreescritura- donde, adentro del mismo, podrá tener cualqueir tipo de implementación. Luego solo con instanciar a esa "Persona" podemos guardarla en la colección como un "EnviadorDeMensaje" y pedirle que envíe un mensaje mediante el método enviarMensaje(). Sin tocar ni una linea de la clase Campaña, podemos guardar una persona en su colección y manipularla de igual manera que una Paloma o un Teléfono. Esto nos demuestra una gran reutilización y gran robustez del código. 

Para destacar entonces, las interfaces son estructuras o planos de qué deben cumplir las clases que las implementan, y esto hace que también se reduzca el Coupling. Mientras menos dependa una clase de otra, o una clase de una interfaz, menos coupling, más abstracción y un mejor modelo de POO tendremos. Al cambiar la implementación de una clase, no tendremos que refactorizar la interfaz que se implementa, cosa que si ocurriría si fuese una relación entre clases. Si una clase aplica a otra, y cambias el constructor de la primera, tendremos que agregar o quitar los datos del constructor que la instancia. Muchas veces si tenemos una relación entre una clase A y una B (A --> B) lo que podemos hacer es agregar una interfaz en el medio para desacoplarlas (decoupling) de manera de que no se utilizan entre si, teniendo menos coupling y mayor abstacción (A --> INTERFACE <-- B). En el segundo caso A y B no se comunican entre ellas, y podremos refactorizar a ambas sin necesidad de arrastrar una modificación a otros lugares. Mañana podremos muy facilmente reemplazar A o B por otra clase que implemente la misma interface. 

Esto se llama programación contra interfaces, donde llamamos a las clases a trabajar con interfaces, y no con implementaciones concretas y esto nos permite desarrollar aplicaciónes con menor coupling, más extensibles y mejor capacidad de testeo al trabajar con unidades independientes (unitesting).

┌──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│Las interfaces definen QUE se debe hacer, las clases que la implementan definirán COMO se debe hacer. │
└──────────────────────────────────────────────────────────────────────────────────────────────────────┘
Se pueden pensar las interfaces como contratos; las interfaces obligan a las clases que la implementan a cumplir con estos contratos, sin importar la forma en que lo hacen. Una interfaz obliga a una clase a cumplir con métodos, que devuelvan o modifiquen algo. Una intefaz declara que cualqueir clase que la implemente debe tener un método con una firma, y con su tipo de devolución.
Lo que nos da mucha flexibilidad para cambiar el COMO mientras se respete el QUE. Todos los celulares que tienen puerto USBC se cargarán con este puerto y se puede reemplazar el cargador por cualqueir otro con mejores tiempo de carga, mas facil transportabilidad, etc. Siempre que se respete el input (USBC) será muy facil reemplazar el COMO.

En los últimos años JAVA realizó distintas implementaciones que otorgan la posibilidad de definir atributos (siempre como public static final) en interfaces. No es recomendable usar atributos en interfaces, estas constantes están relacionadas con la implementación, y no tienen lugar en interfaces. Además aumenta el coupling y genera que al cambiar alguna de estas constantes, rompa todo el código que las use y rompemos todos los contratos que hicimos en clases que implementan esta interfaz.
Otra implementación fue la de poder agregar métodos static en interfaces, esto hace de nuevo, que aumente el coupling y además, como son static y forman parte de la interfaz, llevan lógica. Esto va en contra de todo lo que vimos de interfaces. Las interfaces no deberían llevar lógica, ni datos, solo una estructura. Si tenemos lógica adentro de una interfaz, al modificar algo de esta lógica, estamos rompiendo todos los contratos de las clases que la implementan.
Otra implementación nueva es la posibilidad de definir métodos privados dentro de una interfaz, y de nuevo, las interfaces definene el QUE, no el COMO, no deberían tener lógica dentro de ellas.
┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ Las interfaces solo deben tener declaraciones de métodos dentro de ellas (no lógica, no métodos, no fields, nada). │
│ LAS INTERFACES SON SOLAMENTE CONTRATOS A CUMPLIR POR LAS CLASES.                                                   │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘