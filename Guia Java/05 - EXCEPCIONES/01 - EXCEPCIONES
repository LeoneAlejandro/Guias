EXCEPCIONES

Una Excepción es un evento ocurrido al generarse un error en un programa durante el tiempo de ejecución. Cuando esto ocurre, se bloquea el flujo normal del programa, provocando en la mayoría de los casos que éste finalice prematuramente. Los lenguajes de programación nos ofrecen mecanismos que nos permite manejar las excepciones evitando, en tiempo de ejecución, el crasheo del programa y continuando con el flujo del mismo mostrando un error personalizado, más legible y facil de commprender.

Como hacemos para manejar las excepciones ? Esto lo hacemos mediante los bloques de códgo "try-catch" y, opcionalmente, "finally". Estos bloques de código son usados como una especie de validación de datos donde, adentro de un try, escribimos cierta lógica que al fallar nos llevará al bloque "catch".

public void algunMetodo(){

	// Instrucciones sin posibles excepciones

	try{
		//Instrucciones con posible excepción
		/* Instrucciones que dependen de la que
		posiblemente lance excepción*/
	} catch(UnTipoDeExepción ex){
		/*Lógica a ejecutar en caso de caputrar
		una excepción de tipo "UnTipoDeExpeción"*/
	} finally {
		/*Bloque opcional: se ejecuta en cualquiera
		de los dos casos */
	}

	// Instrucciones sin posibles excepciones

} 

Como vemos en este ejemplo genérico, toda la lógica que pueda llegar a traer un error que corte el flujo de nuestro programa debe estar dentro de un bloque "try" y tenemos que saber cómo corregir ese error. Por ejemplo, supongamos que muy sencillamente hacemos un programa que divida un input del usuario por otro input del usuario. Cuando hacemos esta división necesitamos encerrarlo en un bloque try por la posibilidad de que el usuario inserte 0 como divisor, un string ya sea como divisor o como dividendo, o culquier otro input que rompa nuestro programa.
Luego, mediante el bloque catch, necesitamos decidir como solucionar esto para seguir un el flujo, y que no crashee nuestro programa. Estos bloques dependerán del tipo de excepción que arroje el programa, por ejemplo, si dividimos por 0 la excepción será "ArithmeticException" y podríamos decidir tomar el resultado como 0; o si el usuario insertó un string, tendremos un "InputMismatchException" y lo podemos solucionar de otra manera. Podemos tomar dentro de un catch algo más generalziado como simplemente una "Excepción ex" que tomará todas las excepcions sin depender de cual sea el tipo.
Por último, el bloque opcional finally, se ejecutará de todos modos, ya sea si se haya ejecutado el bloque try, o el catch.