02 - JPA, HIBERNATE & SPRIN DATA JPA
─────────────────────────────────────┘

H2 Database:
────────────┘

	H2 es un sistema de manejo de base de datos en memoria. Este sistema no deja configurar ciertos parámetros para poder desde nuestro navegador modificar bases de datos sobre las que trabajaremos a lo largo del proyecto. La dependencia necesaria en el pom.xml es la siguiente:

		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <scope>runtime</scope>
		</dependency>

	luego podemos configurar lo siguiente para poder entrar al sistema de manejo de base de datos en el endpoint localhost:8080/h2-database

		spring.h2.console.enabled=true
		server.contextPath=
		spring.datasource.url=jdbc:h2:mem:testdb

	También podemos configurar más datos para customizar el acceso como username, password, etc. Luego desde esta url /h2-database podemos crear y modificar tablas, insertar valores y cualquier otro tipo de SQL querys, etc.


Para crear un schema y tabla usando h2 debemos crear un archivo llamado "schema.sql" dentro de la carpeta src/main/resources con el formato que querramos que tenga nuestra tabla. Por ejemplo:

		create table course
		(
			id bigint not null,
			name varchar(255) not null,
			author varchar(255) not null,
			primary key(id) 
		);

Ahora cada vez que corramos nuestro proyecto una tabla con el nombre Course y los atributos descriptos será creada.

Tanto cuando usamos JDBC o Spring JPA estamos haciendo SQL queries, pero la diferencia es que en Spring JDBC necesitamos mucha menor cantidad de código para las mismas instrucciones. Un ejemplo del mismo query en JDBC y Spring JPA es el siguiente:

	public void deleteTodo (int id) {
		PreparatedStatement st = null;

		try {
			st = db.conn.preparatedStatement("delete from todo where id=?");
			st.setInt(1, id);
			st.execute();
		} catch (SQLException e) {
			logger.fatal("Query Failed: ", e);
		} finally {
			if(st != null) {
				try {st.close();}
				catch (SQLException e) {}
			}
		}
	}

	VS Spring JPA

	public void deleteTodo(int id) {
		jdbcTemplate.update("delete from todo where id=?", id);
	}


QUERYING DATA CON SPRING JDBC
──────────────────────────────┘

Para hablar con una base de datos en JDBC hay que seguir las convenciónes originales de escribir tanto las QUERYs correspondientes a nuestras busquedas y los métodos que utilizaremos con la lógica de las querys y parámetros que pasaremos
Un ejemplo práctico sería, teniendo una clase Course con atributos id, name y author, con getters y setters y constructores, podemos crear la siguiente clase del tipo @Repository

		@Repository
		public class CourseJdbcRepository {

			@Autowired
			private JdbcTemplate springJdcbTemplate;
			
			private static String INSERT_QUERY =
					"""
						insert into course(id, name, author)
						values(?, ?, ?);	
					""";
			
			private static String DELETE_QUERY =
					"""
						delete from course where id=?	
					""";
			
			private static String SELECT_QUERY =
					"""
						select * from course where id=?	
					""";
			
			public void insert(Course course) {
				springJdcbTemplate.update(INSERT_QUERY, course.getId(), course.getName(), course.getAuthor());
			}
			
			public void delete(long id) {
				springJdcbTemplate.update(DELETE_QUERY, id);	
			}
			
			public Course findById(long id) {
				return springJdcbTemplate.queryForObject(SELECT_QUERY, new BeanPropertyRowMapper<>(Course.class), id);	
			}
			
Donde tenemos QUERYs específicas y métodos específicos para diferentes consultas o modificaciones de nuestra base de datos. Luego desde un CommandLineRunner podemos pedirle

		@Component
		public class CourseJdbcCommandLineRunner implements CommandLineRunner {

			@Autowired
			private CourseJdbcRepository repository;
			
			@Override
			public void run(String... args) throws Exception {
				repository.insert(new Course(1, "Learn AWS", "AleLeone"));
				repository.insert(new Course(2, "Learn JDBC", "FiliLeone"));
				repository.insert(new Course(3, "Learn JPA", "RufinaLeone"));
				
				repository.delete(1);
				
				System.out.println(repository.findById(2));
				
			}

		}

Y veremos que nuestra base de datos primero agregará 3 lineas, luego borrará la primera y luego imprimirá en consola la linea 2. Pero las querys de estos casos son muy engorrosos, el código es muy verborrágico, y tenemos muchas conexiones entre clases. Podemos simplificar mucho esto.


JPA:
────┘

	Al usar JPA podemos simplificar mucho todo este proceso y lo que hacemos es mapear nuestro Bean directamente con la tabla de nuestra base de datos. Podemos tener por ejemplo una clase Course con id, name y author como atributos, y luego creamos una tabla Course también con id, name y author como columnas de la tabla. Luego usamos el decorator @Entity en la clase Course y lo estaremos mapeando con la tabla del mismo nombre.

	Veamos el mismo ejemplo anterior pero con Spring JPA. Vamos a anotar nuestra clase Course con @Entity y tmabién anotaremos a nuestra primary key con @Id y el resto de los atributos con @Column

	@Entity							//si la tabla tuviese un nombre distinto a nuestra clase deberíamos agregar (name="nombre_de_tabla")
	public class Course {

		@Id
		private long id;
		@Column(name="name")		//no es obligatorio aclarar este decorator ya que el nombre del atributo y de la columna de la tabla son iguales
		private String name;
		@Column(name="author")		//idem, no es necesario el decorator
		private String author;

		Constructores + Getters and Setters + toString
	}


	Una vez creada la entidad debemo crear un repositorio para manejarla, y crearemos los mismos métodos que antes para ver las diferencias:

		@Repository
		@Transactional
		public class CourseJpaRepository {

			@PersistenceContext 					//es lo mismo que @Autowired pero más específico y mejor en este contexto
			private EntityManager entityManager;
			
			public void insert(Course course) {
				entityManager.merge(course);
			}
			
			public Course findById(long id) {
				return entityManager.find(Course.class, id);
			}
			
			public void deleteById(long id) {
				Course course = entityManager.find(Course.class, id);
				entityManager.remove(course);
			}
			
		}

	Vemos que ahora no necesitamos las SELECT_QUERY, DELETE_QUERY, etc, ni todos los métodos específicos, ni pasar tantos parámetros. Al estar nuestros cursos mapeados con las tablas se hace todo mucho más sencillo y las 32 lineas desde la 71 a la 103 ahora se redujeron a las últimas 19, siendo también la sintaxsis y lógica mucho más reducida y facil de leer y codear.
	Corriendo el mismo CommandLineRunner de antes y cambiando la dependencia 
	
		@Autowired 
		private CourseJdbcRepository repository; 

	por nuestro CourseJpaRepository tendremos el mismo resultado que antes con un código mucho más corto, eficiente, facil de leer y codear.


JDBC vs JPA vs Spring JPA:
──────────────────────────┘

Como vimos entonces en JDBC tenemos que escribir muchas QUERYs y mucho código JAVA, con Spring JDBC tenemos que seguir escribiendo QUERYs pero mucho menos código JAVA. Con JPA ya no nos tenemos que preocupar por escribir QUERYs, solo código JAVA muy sencillo mapeando entidades a tablas.

Pero hay una forma más simple de hablar con bases de datos y es con Spring Data JPA. SDJPA hace JPA más simple, ni siquiera nos tenemos que preocupar por manejar entidades.
Vamos a refactorizar el código de Course con Spring Data JPA.



Spring Data JPA:
────────────────┘

Ahora tenemos que crear una interfaz que extienda a la clase JpaRepository<T, TD> donde T es la entidad que manejamos (Crouse en este caso) y TD es el campo id (Long en este caso). Una vez hecho esto no tenemos que hace nada más. No tenemos que definir un EntityManager como en la linea 158, no tenemos que definir los 3 métodos de las lineas 160, 164 y 168. Todo esto lo hará Spring por nosotros. Solamente tenemos que cambiar la linea 111 y pasarle a nuestro CommandLineRunner nuestro nuevo @Autowired private "CourseSpringDataJpaRepository repository" y asegurarnos que el nombre de los métodos que antes nosotros creamos sean los mismos métodos estándares de Spring Data JPA. Ahora "insert" será "save", pero findById y deleteById son firmas de métodos de SDJPA por lo que no tenemos que cambiarlos:

		@Component
		public class CourseCommandLineRunner implements CommandLineRunner {

			@Autowired
			private CourseSpringDataJpaRepository repository;
			
			@Override
			public void run(String... args) throws Exception {
				repository.save(new Course(1, "Learn AWS", "AleLeone"));
				repository.save(new Course(2, "Learn JPA", "FiliLeone"));
				repository.save(new Course(3, "Learn Spring", "Renata"));
				
				repository.deleteById(1l);										//Hay que agregar l en el parámetro para indicar que son "long" 
				
				System.out.println(repository.findById(2l));
			}
		}

Spring Data JPA ofrece una gran variedad de métodos predefinidos a usar para nuestros repositorys, por ejemplo:

				repository.findAll()				//devuelve todos los crusos
				repository.count()					//devuelve la cantidad de cursos

Pero también podemos definir métodos especiales y custom, por ejemplo, queremos buscar cursos por autor. Para hacer esto necesitamos seguir una convención sobre atributos, en este caso el método debería llamarse "findByAuthor" por que "Author" es el nombre del atributo o culmna por el que queremos buscar. Éste método se debe definir en la interface CourseSpringDataJpaRepository que hasta ahora estaba vacía:

		public interface CourseSpringDataJpaRepository extends JpaRepository<Course, Long>{

			List<Course> findByAuthor(String author);
		}

Tenemos también que definir lo que nos devuelve (lista de cursos) y el parámetro necesario (autor). Y luego simplemente podemos usar este método en nuestro CourseCommandLineRunner.
Es importante volver a remarcar que hay que seguir la convención de nombres: si quiero hacer un nuevo método para buscar cursos por nombre de cursos mi método DEBE llamarse findByName, no puede ser findByCourseName u otro nombre diferente, Spring Data JPA no reconocerá como campo de la tabla o atributo de la clase Course a "CourseName" y el método no funcionará. Nos devolverá un error al intentar instanciar el Bean CourseSpringDataJpaRepository.


HIBERNATE vs JPA
─────────────────┘

Hasta ahora solo hicimos uso del JPA (jakarta.persistance API), ya que JPA define la especificación. JPA es una API, una interfaz, define como podemos definir entidades (@Entity), define como una primarykey (@Id), como definimos atributos (@Column aunque no es obligatorio si el nombre de la columna es el mismo que el atributo) y JPA también nos define quien maneja estas entidades.
Hibernate es UNA implementación de JPA, la más popular hoy en día. JPA define la API, como mapear los objetos a tablas pero hibernate lo IMPLEMENTA. Hibernate es la implementación de nuestra API (jakarta.persistance API). No es recomendable usar Hibernate directamente ya que podemos lockearnos en Hibernate. Es siempre mejor usar Hibernate a través de Spring Data JPA.

Entonces JPA es una API, define una especificación (COMO mapear entidades, atributos, etc), mientras que Hibernate es una implementación de la JPA.